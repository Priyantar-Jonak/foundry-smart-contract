{"language":"Solidity","sources":{"src/Raffle.sol":{"content":"// Layout of Contract:\n// version\n// imports\n// errors\n// interfaces, libraries, contracts\n// Type declarations\n// State variables\n// Events\n// Modifiers\n// Functions\n\n// Layout of Functions:\n// constructor\n// receive function (if exists)\n// fallback function (if exists)\n// external\n// public\n// internal\n// private\n// view & pure functions\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {VRFConsumerBaseV2Plus} from \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\";\nimport {VRFV2PlusClient} from \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\";\n\n/**\n * @title A simple Raffle contract\n * @author xunLin8\n * @notice This contract is a simple raffle system where users can enter the raffle and a winner is selected randomly.\n * @dev Implements Chainlink VRFv2.5\n * VRF -> Verifiable Randomness Function\n */\ncontract Raffle is VRFConsumerBaseV2Plus {\n    /** Errors */\n    error Raffle__SendMoreToEnterRaffle(); // the prefix__ is present to give context for where the revert is coming from\n    error Raffle__NotCompleted(); // error for when the raffle is not completed, i.e. the time interval has not passed\n    error Raffle__TransferFailed(); // error for when the transfer of prizemoney fails\n    error Raffle__NotOpen(); // error for when the raffle is not open to enter\n    error Raffle__UpkeepNotNeeded(uint256 balance, uint playersLength, uint256 raffleState);\n\n    /** Type Declarations */\n    // enum is a user-defined type that consists of a set of named values\n    enum RaffleState {\n        OPEN, // 0\n        CALCULATING // 1\n    } // each one of these values get mapped to uint256 values\n\n    /** State Variables */\n    uint16 private constant REQUEST_CONFIRMATIONS = 3; // number of confirmations before the random number is considered valid\n    uint32 private constant NUM_WORDS = 1; // number of random words to request\n\n    uint256 private immutable i_entranceFee; // entrance fee to enter the raffle in wei (1 ETH = 10^18 wei)\n    uint256 private immutable i_interval; // interval between raffle draws/duration of the lottery in seconds\n    bytes32 private immutable i_keyHash; // the key hash for the Chainlink VRF is the gas I'm willing to pay for the random number\n    uint256 private immutable i_subscriptionId; // subscription ID for Chainlink VRF\n    uint32 private immutable i_callbackGasLimit; // gas limit for the callback function\n\n    address payable[] private s_players;\n    uint256 private s_lastTimeStamp; // last time the raffle was drawn\n    address private s_recentWinner; // the most recent winner of the raffle\n    RaffleState private s_raffleState; // state of the raffle // should start as OPEN => 0, and then change to CALCULATING => 1 when the winner is being calculated/picked\n\n    /** Events */\n    // 1. Makes migration easier\n    // 2. Makes front end \"indexing\" easier\n    event RaffleEntered(address indexed player); // indexed is a keyword that allows us to filter the event by the address of the player\n    event WinnerPicked(address indexed winner); // event for when a winner is picked\n    event RequestRaffleWinner(uint256 indexed requestId); // event for when a request for a random number is made, indexed allows us to filter the event by the request ID\n\n    constructor(uint256 entranceFee, uint256 interval, address vrfCoordinator, bytes32 gasLane, uint256 subscriptionId, uint32 callbackGasLimit) VRFConsumerBaseV2Plus(vrfCoordinator) {\n        i_entranceFee = entranceFee; // set the entrance fee to the one passed in\n        i_interval = interval; // set the interval to the one passed in\n        i_keyHash = gasLane; // set the key hash to the one passed in, this is the gas lane for the Chainlink VRF\n        i_subscriptionId = subscriptionId; // set the subscription ID to the one passed in\n        i_callbackGasLimit = callbackGasLimit; // set the callback gas limit to the one passed in\n\n        s_lastTimeStamp = block.timestamp; // set the last time stamp to the current block timestamp\n        s_raffleState = RaffleState.OPEN; // set the default raffle state to open\n    }\n\n    function enterRaffle() external payable {\n        // require(msg.value >= i_entranceFee, \"Not enough ETH sent!\");\n        // require(msg.value >= i_entranceFee, SendMoreToEnterRaffle()); // newest version but not as gas efficient as the conditional\n        if (msg.value < i_entranceFee) {\n            // most gas efficient\n            revert Raffle__SendMoreToEnterRaffle(); // A custom error is used to replace the gas-costly string, it results in gas efficiency cause it doesn't deal with the costly string value\n        }\n        if (s_raffleState != RaffleState.OPEN) {\n            revert Raffle__NotOpen(); // revert the transaction if the raffle is not open, i.e. the raffle is calculating a winner\n        }\n\n        s_players.push(payable(msg.sender)); // add the player to the players array, we use payable here because we want to be able to send ETH to the player when they win, \n        // msg.sender is the address of the player who is entering the raffle\n\n        // anytime we update the storage, make sure to emit an event, to let the application/frontend know that something has occurred\n        emit RaffleEntered(msg.sender); // emit the event when a player enters the raffle\n    }\n\n    /**\n     * @dev This is the function that the Chainlink nodes will call to see\n     * if the lottery is ready to have a winner picked.\n     * The following should be true in order for upkeepNeeded to be true:\n     * 1. The time interval has passed between raffle runs\n     * 2. The lottery is open\n     * 3. The contract has ETH (has players)\n     * 4. Implicitly, your subscription has LINK\n     * @param - ignored\n     * @return upkeepNeeded\n     * @return - ignored\n     */\n    function checkUpkeep(bytes memory /* checkData */) public view returns (bool upkeepNeeded /* in-param initialisation defaults to false */, bytes memory /* performData */) {\n        bool timeHasPassed = (block.timestamp - s_lastTimeStamp) >= i_interval; // check if the time interval has passed\n        bool isOpen = (s_raffleState == RaffleState.OPEN); // check if the raffle is open\n        bool hasPlayers = (s_players.length > 0); // check if there are players in the raffle\n        bool hasBalance = (address(this).balance > 0); // check if the contract has a balance\n\n        upkeepNeeded = (timeHasPassed && isOpen && hasBalance && hasPlayers); // return true if all conditions are met\n        // upkeepNeeded is true if all the conditions are met, otherwise it is false\n        return (upkeepNeeded, \"\"); // return the upkeepNeeded bool result and an empty bytes array for performData\n    }\n\n    // 1. Pick a random winner\n    // 2. Use random number to pick a player\n    // 3. Be automatically called\n    function performUpkeep( bytes calldata /* performData */) external {\n        // block.timestamp is a global variable that returns the current block timestamp\n\n        // if ((block.timestamp - s_lastTimeStamp) < i_interval) {\n        //     // check if the interval has passed\n        //     revert Raffle__NotCompleted();\n        // }\n        (bool upkeepNeeded, ) = checkUpkeep(\"\"); // call the checkUpKeep function to see if upkeep is needed        // whenever we use a variable inside a function it can never be calldata, cause anything generated from a smart contract is never calldata, calldata can only be generated from the user's transactions\n        if (!upkeepNeeded) {\n            revert Raffle__UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState)); // revert the transaction if upkeep is not needed // we pass the balance of the contract, the number of players and the raffle state to the error for debugging purposes\n        }\n\n        s_raffleState = RaffleState.CALCULATING; // set the raffle state to calculating, so people can't enter the raffle while the winner is being calculated\n\n        // Getting a Random number for Chainlink VRF is a two step process\n        // 1. Request a random number\n        // 2. Receive/Get the random number from the Chainlink callback function\n        VRFV2PlusClient.RandomWordsRequest memory request = VRFV2PlusClient.RandomWordsRequest({\n                keyHash: i_keyHash,\n                subId: i_subscriptionId,\n                requestConfirmations: REQUEST_CONFIRMATIONS,\n                callbackGasLimit: i_callbackGasLimit,\n                numWords: NUM_WORDS,\n                extraArgs: VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: false})) // Set nativePayment to true to pay for VRF requests with Sepolia ETH instead of LINK\n        });\n\n        uint256 requestID = s_vrfCoordinator.requestRandomWords(request);\n    \n        // this emit is actually redundant because the s_vrfCoordinator.requestRandomWords function already emits an event in VRFConsumerBaseV2Plus, but we are keeping it for consistency\n        emit RequestRaffleWinner(requestID); // emit the event when a request for a random number is made, this will be used to track the request ID in the frontend\n    }\n\n    // CEI: Checks, Effects, Interactions Pattern\n    function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal override {\n        // Checks: require, conditionals\n        \n        // Effects (Internal contract State Updates)\n        uint256 indexOfWinner = randomWords[0] % s_players.length; // get the index of the winner\n        address payable recentWinner = s_players[indexOfWinner]; // get the address of the winner\n        s_recentWinner = recentWinner; // set the recent winner to the winner\n        \n        s_raffleState = RaffleState.OPEN; // set the raffle state back to open for the next raffle\n        s_players = new address payable[](0); // reset the players array to an empty array for the next raffle\n        s_lastTimeStamp = block.timestamp; // set the last time stamp to the current block timestamp for the next raffle\n        \n        emit WinnerPicked(s_recentWinner); // emit the event when a winner is picked // emit the event with the recent winner's address\n\n        // Interactions (External Contract Interactions)\n        // Solidity uses parentheses () for tuple assignment.\n        (bool success,) = recentWinner.call{value: address(this).balance}(\"\"); // send the balance of the entire contract to the winner\n        if(!success) {\n            revert Raffle__TransferFailed(); // revert the transaction if the transfer fails\n        }\n\n    }\n\n    /** Getter Functions */\n    function getEntranceFee() external view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getRaffleState() external view returns (RaffleState) {\n        return s_raffleState;\n    }\n\n    function getPlayer(uint256 indexOfPlayer) external view returns (address) {\n        return s_players[indexOfPlayer];\n    }\n\n    function getLastTimeStamp() external view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRecentWinner() external view returns (address) {\n        return s_recentWinner;\n    }\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {IVRFCoordinatorV2Plus} from \"./interfaces/IVRFCoordinatorV2Plus.sol\";\nimport {IVRFMigratableConsumerV2Plus} from \"./interfaces/IVRFMigratableConsumerV2Plus.sol\";\nimport {ConfirmedOwner} from \"../../shared/access/ConfirmedOwner.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords, extraArgs),\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\n *\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\n  error ZeroAddress();\n\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\n  // so that coordinator reference is updated after migration\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\n    if (_vrfCoordinator == address(0)) {\n      revert ZeroAddress();\n    }\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\n    if (msg.sender != address(s_vrfCoordinator)) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n\n  /**\n   * @inheritdoc IVRFMigratableConsumerV2Plus\n   */\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\n    if (_vrfCoordinator == address(0)) {\n      revert ZeroAddress();\n    }\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\n\n    emit CoordinatorSet(_vrfCoordinator);\n  }\n\n  modifier onlyOwnerOrCoordinator() {\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\n    }\n    _;\n  }\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// End consumer library.\nlibrary VRFV2PlusClient {\n  // extraArgs will evolve to support new features\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\"VRF ExtraArgsV1\"));\n  struct ExtraArgsV1 {\n    bool nativePayment;\n  }\n\n  struct RandomWordsRequest {\n    bytes32 keyHash;\n    uint256 subId;\n    uint16 requestConfirmations;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n    bytes extraArgs;\n  }\n\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VRFV2PlusClient} from \"../libraries/VRFV2PlusClient.sol\";\nimport {IVRFSubscriptionV2Plus} from \"./IVRFSubscriptionV2Plus.sol\";\n\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\n  /**\n   * @notice Request a set of random words.\n   * @param req - a struct containing following fields for randomness request:\n   * keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * requestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * extraArgs - abi-encoded extra args\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\n/// @notice method required to be implemented by all V2Plus consumers.\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\ninterface IVRFMigratableConsumerV2Plus {\n  event CoordinatorSet(address vrfCoordinator);\n\n  /// @notice Sets the VRF Coordinator address\n  /// @notice This method should only be callable by the coordinator or contract owner\n  function setCoordinator(address vrfCoordinator) external;\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwnerWithProposal} from \"./ConfirmedOwnerWithProposal.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\n/// @notice related methods implemented by the V2Plus coordinator.\ninterface IVRFSubscriptionV2Plus {\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint256 subId, address to) external;\n\n  /**\n   * @notice Accept subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\n   * @dev  to send Native with the call, for example:\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\n   */\n  function createSubscription() external returns (uint256 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return nativeBalance - native balance of the subscription in wei.\n   * @return reqCount - Requests count of subscription.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint256 subId\n  )\n    external\n    view\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint256 subId) external view returns (bool);\n\n  /**\n   * @notice Paginate through all active VRF subscriptions.\n   * @param startIndex index of the subscription to start from\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\n   */\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\n\n  /**\n   * @notice Fund a subscription with native.\n   * @param subId - ID of the subscription\n   * @notice This method expects msg.value to be greater than or equal to 0.\n   */\n  function fundSubscriptionWithNative(uint256 subId) external payable;\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    // solhint-disable-next-line gas-custom-errors\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /// @notice Allows an owner to begin transferring ownership to a new address.\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /// @notice Allows an ownership transfer to be completed by the recipient.\n  function acceptOwnership() external override {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /// @notice Get the current owner\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /// @notice validate, transfer ownership, and emit relevant events\n  function _transferOwnership(address to) private {\n    // solhint-disable-next-line gas-custom-errors\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /// @notice validate access\n  function _validateOwnership() internal view {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /// @notice Reverts if called by anyone other than the contract owner.\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"},"lib/chainlink-brownie-contracts/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"}},"settings":{"remappings":["@solmate/=lib/solmate/src/","chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/","ds-test/=lib/solmate/lib/ds-test/src/","forge-std/=lib/foundry-devops/lib/forge-std/src/","foundry-devops/=lib/foundry-devops/","solmate/=lib/solmate/src/","weird-erc20/=lib/solmate/lib/weird-erc20/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"useLiteralContent":false,"bytecodeHash":"ipfs","appendCBOR":true},"outputSelection":{"*":{"*":["abi","evm.bytecode.object","evm.bytecode.sourceMap","evm.bytecode.linkReferences","evm.deployedBytecode.object","evm.deployedBytecode.sourceMap","evm.deployedBytecode.linkReferences","evm.deployedBytecode.immutableReferences","evm.methodIdentifiers","metadata"]}},"evmVersion":"paris","viaIR":false,"libraries":{}}}
